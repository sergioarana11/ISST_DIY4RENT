package com.example.diy4rent.demo.controllers;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

//import org.apache.el.stream.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.ui.Model;
//import org.springframework.http.codec.multipart.FormData;

import java.io.IOException;
import java.util.List;
import com.example.diy4rent.demo.model.*;
import com.example.diy4rent.demo.repo.ICarritoRepo;
import com.example.diy4rent.demo.repo.IHerramientaRepo;
import com.example.diy4rent.demo.repo.IUsuarioRepo;
import com.example.diy4rent.demo.service.HerramientaService;

import jakarta.servlet.http.HttpSession;

@RestController
public class controller {

    /*
     * Autor: Sofía Pita Miguélez
     */

    @Autowired
    private IHerramientaRepo repo;
    @Autowired
    private IUsuarioRepo repoUsuarios;
    @Autowired
    private ICarritoRepo carritoRepo;

    private HerramientaService herramientaService;

    @GetMapping(value = "/")
    public ModelAndView getIndex() {
        ModelAndView modelAndView = new ModelAndView("index.html");
        List<Herramientas> herramientas = repo.findAll();
        modelAndView.addObject("herramientas", herramientas);
        return modelAndView;
    }

    @GetMapping(value = "/herramientas")
    public ModelAndView getHerramientas() {
        ModelAndView modelAndView = new ModelAndView("herramientas.html");
        List<Herramientas> herramientas = repo.findAll();
        // System.out.println("Working view");
        // System.out.println(herramientas.get(0).getUuid());
        modelAndView.addObject("herramientas", herramientas);
        modelAndView.addObject("uuid", herramientas.get(0).getPhoto());
        return modelAndView;
    }

    @GetMapping(value = "/register")
    public ModelAndView getRegister() {
        ModelAndView modelAndView = new ModelAndView("register.html");
        return modelAndView;
    }

    @PostMapping(value = "/register")
    public ModelAndView addUsuario(@RequestParam("email") String email, @RequestParam("dni") String dni,
            @RequestParam("password") String password, @RequestParam("nombre") String nombre,
            @RequestParam("apellido1") String apellido1, @RequestParam("apellido2") String apellido2,
            @RequestParam("movil") String movil, @RequestParam("location") String location,
            @RequestParam("charge_info") String charge_info) {
        // System.out.println("Funciona!!!");
        Usuarios usuario = new Usuarios(email, dni, password, nombre, apellido1, apellido2, movil, location,
                charge_info);
        repoUsuarios.save(usuario);
        ModelAndView modelAndView = new ModelAndView("reg_correcto.html");
        return modelAndView;
    }

    @GetMapping(value = "/form")
    public ModelAndView uploadHerramienta() {
        ModelAndView modelAndView = new ModelAndView("form.html");
        modelAndView.addObject("herramienta", new Herramientas());
        return modelAndView;
    }

    // Este es el del sprint2

    /*
     * @PostMapping(value = "/form")
     * public ModelAndView addHerramienta(@RequestParam("title") String title,
     * 
     * @RequestParam("description") String description, @RequestParam("price") Float
     * price,
     * 
     * @RequestParam("photo") MultipartFile photo, @RequestParam("category") String
     * category,
     * 
     * @RequestParam("location") String location, @RequestParam("charge_info")
     * String charge_info) {
     * System.out.println("Correctly: " + photo.toString());
     * // Default Dummy image
     * String hexBinaryImage =
     * "";
     * byte[] hexBytes =
     * jakarta.xml.bind.DatatypeConverter.parseHexBinary(hexBinaryImage);
     * try {
     * byte[] bytes = photo.getBytes();
     * String hexBinary = jakarta.xml.bind.DatatypeConverter.printHexBinary(bytes);
     * hexBytes = jakarta.xml.bind.DatatypeConverter.parseHexBinary(hexBinary);
     * } catch (IOException e) {
     * e.printStackTrace();
     * }
     * Herramientas herramienta = new Herramientas(title, description, (float)
     * price, hexBytes, category, location,
     * charge_info);
     * repo.save(herramienta);
     * ModelAndView modelAndView = new ModelAndView("reg_correcto.html");
     * return modelAndView;
     * }
     */
    // ESTE ES DEL SPRINT 3

    @PostMapping(value = "/form")
    public ModelAndView addHerramienta(@RequestParam("title") String title,

            @RequestParam("description") String description, @RequestParam("price") Float price,

            @RequestParam("photo") MultipartFile photo, @RequestParam("category") String category,

            @RequestParam("location") String location, @RequestParam("charge_info") String charge_info) {
        System.out.println("Correctly uploaded photo: " +
                photo.getOriginalFilename());
        // System.out.println("Correctly: " + photo.toString());
        // Default Dummy image
        String hexBinaryImage = "";
        byte[] hexBytes = jakarta.xml.bind.DatatypeConverter.parseHexBinary(hexBinaryImage);
        try {
            byte[] bytes = photo.getBytes();
            String hexBinary = jakarta.xml.bind.DatatypeConverter.printHexBinary(bytes);
            hexBytes = jakarta.xml.bind.DatatypeConverter.parseHexBinary(hexBinary);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Herramientas herramienta = new Herramientas(title, description, (float) price, hexBytes, category, location,
                charge_info);
        repo.save(herramienta);
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.addObject("herramienta", herramienta);

        modelAndView.setViewName("preview");

        return modelAndView;
    }

    // ESTE ES DEL SPRINT 3

    @GetMapping("/preview")
    public ModelAndView mostrarPrevisualizacion(@ModelAttribute Herramientas herramienta) {
        // mostrar los datos de la herramienta en la página
        ModelAndView modelAndView = new ModelAndView("preview");
        modelAndView.addObject("herramienta", herramienta);
        return modelAndView;
    }

    // ESTO ES SPRINT 3

    @PostMapping("/confirm")
    public ModelAndView guardarHerramienta(@ModelAttribute Herramientas herramienta) {
        // Si la herramienta no tiene ID asignado, generamos uno nuevo
        if (herramienta.getUuid() == null) {
            herramienta.setUuid(UUID.randomUUID().toString());
        }
        // repo.save(herramienta);
        ModelAndView modelAndView = new ModelAndView("redirect:http://localhost:8080/");
        return modelAndView; // Redirige al usuario a la página principal
    }

    // PROBANDO ESTAS NUEVAS RUTAS
    @GetMapping("/herramienta/{uuid}/editar")
    public ModelAndView mostrarFormularioEdicion(@PathVariable("uuid") String herramienta_uuid) {
        // Obtener la herramienta correspondiente al ID proporcionado
        Herramientas herramienta = repo.findByUuid(herramienta_uuid);
        if (herramienta == null) {
            throw new IllegalArgumentException("Herramienta no encontrada con UUID" + herramienta_uuid);
        }
        // .orElseThrow(() -> new IllegalArgumentException("Herramienta no encontrada
        // con ID: " + uuid));
        ModelAndView modelAndView = new ModelAndView("modform");
        // Agregar la herramienta al modelo
        modelAndView.addObject("herramienta", herramienta);

        // Mostrar el formulario de edición
        return modelAndView;
    }

    @GetMapping("/modform/{uuid}")
    public ModelAndView mostrarFormularioModificacion(@PathVariable("uuid") String uuid) {
        Optional<Herramientas> herramientaOptional = repo.findById(uuid);
        if (herramientaOptional.isPresent()) {
            Herramientas herramientaExistente = herramientaOptional.get();
            ModelAndView modelAndView = new ModelAndView("modform");
            modelAndView.addObject("herramienta", herramientaExistente);
            return modelAndView;
        } else {
            ModelAndView modelAndView = new ModelAndView("redirect:/");
            return modelAndView;
        }
    }
}
/*
 * @PostMapping("/herramienta/{id}/editar")
 * public String actualizarHerramienta(@PathVariable("id") String uuid,
 * 
 * @ModelAttribute Herramientas herramientaActualizada) {
 * // Obtener la herramienta correspondiente al ID proporcionado
 * Herramientas herramienta = repo.findById(uuid)
 * .orElseThrow(() -> new
 * IllegalArgumentException("Herramienta no encontrada con ID: " + uuid));
 * 
 * // Actualizar los datos de la herramienta con los valores del formulario
 * enviado
 * herramienta.setTitle(herramientaActualizada.getTitle());
 * herramienta.setDescription(herramientaActualizada.getDescription());
 * // ... actualizar el resto de los campos
 * herramienta.setCategory(herramientaActualizada.getCategory());
 * herramienta.setLocation(herramientaActualizada.getLocation());
 * herramienta.setPrice(herramientaActualizada.getPrice());
 * 
 * // Guardar los cambios en la base de datos
 * repo.save(herramienta);
 * 
 * // Redireccionar al índice de herramientas
 * return "redirect:/index";
 * }
 */
// no tengo claro que pasa con esto, de momento comentamos y probamos con la de
// arriba

/*
 * @GetMapping("/modform/{uuid}")
 * public ModelAndView mostrarFormularioModificacion(@PathVariable("uuid")
 * String uuid,
 * 
 * @ModelAttribute("herramienta") Herramientas herramienta) {
 * Optional<Herramientas> herramientaOptional = repo.findById(uuid);
 * if (herramientaOptional.isPresent()) {
 * Herramientas herramientaExistente = herramientaOptional.get();
 * herramientaExistente.setTitle(herramienta.getTitle());
 * herramientaExistente.setDescription(herramienta.getDescription());
 * herramientaExistente.setCategory(herramienta.getCategory());
 * herramientaExistente.setLocation(herramienta.getLocation());
 * herramientaExistente.setCharge_info(herramienta.getCharge_info());
 * // herramientaExistente.setPhoto(herramienta.getPhoto().getBytes());
 * herramientaExistente.setPrice(herramienta.getPrice());
 * repo.save(herramientaExistente);
 * ModelAndView modelAndView = new ModelAndView("modform");
 * modelAndView.addObject("herramienta", herramientaExistente);
 * return modelAndView;
 * } else {
 * ModelAndView modelAndView = new ModelAndView("redirect:/");
 * return modelAndView;
 * }
 */